// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `EventManagerPrxHelper.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package generated;

public final class EventManagerPrxHelper extends Ice.ObjectPrxHelperBase implements EventManagerPrx
{
    public String
    createEvent(String eventName, String eventDesc, int daysFromNow, User u)
    {
        return createEvent(eventName, eventDesc, daysFromNow, u, null, false);
    }

    public String
    createEvent(String eventName, String eventDesc, int daysFromNow, User u, java.util.Map<String, String> __ctx)
    {
        return createEvent(eventName, eventDesc, daysFromNow, u, __ctx, true);
    }

    private String
    createEvent(String eventName, String eventDesc, int daysFromNow, User u, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("createEvent");
                __delBase = __getDelegate(false);
                _EventManagerDel __del = (_EventManagerDel)__delBase;
                return __del.createEvent(eventName, eventDesc, daysFromNow, u, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __createEvent_name = "createEvent";

    public Ice.AsyncResult begin_createEvent(String eventName, String eventDesc, int daysFromNow, User u)
    {
        return begin_createEvent(eventName, eventDesc, daysFromNow, u, null, false, null);
    }

    public Ice.AsyncResult begin_createEvent(String eventName, String eventDesc, int daysFromNow, User u, java.util.Map<String, String> __ctx)
    {
        return begin_createEvent(eventName, eventDesc, daysFromNow, u, __ctx, true, null);
    }

    public Ice.AsyncResult begin_createEvent(String eventName, String eventDesc, int daysFromNow, User u, Ice.Callback __cb)
    {
        return begin_createEvent(eventName, eventDesc, daysFromNow, u, null, false, __cb);
    }

    public Ice.AsyncResult begin_createEvent(String eventName, String eventDesc, int daysFromNow, User u, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_createEvent(eventName, eventDesc, daysFromNow, u, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_createEvent(String eventName, String eventDesc, int daysFromNow, User u, Callback_EventManager_createEvent __cb)
    {
        return begin_createEvent(eventName, eventDesc, daysFromNow, u, null, false, __cb);
    }

    public Ice.AsyncResult begin_createEvent(String eventName, String eventDesc, int daysFromNow, User u, java.util.Map<String, String> __ctx, Callback_EventManager_createEvent __cb)
    {
        return begin_createEvent(eventName, eventDesc, daysFromNow, u, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_createEvent(String eventName, String eventDesc, int daysFromNow, User u, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__createEvent_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __createEvent_name, __cb);
        try
        {
            __result.__prepare(__createEvent_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(eventName);
            __os.writeString(eventDesc);
            __os.writeInt(daysFromNow);
            u.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_createEvent(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __createEvent_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        String __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readString();
        __is.endReadEncaps();
        return __ret;
    }

    public java.util.Map<java.lang.Integer, Event>
    listEvents()
    {
        return listEvents(null, false);
    }

    public java.util.Map<java.lang.Integer, Event>
    listEvents(java.util.Map<String, String> __ctx)
    {
        return listEvents(__ctx, true);
    }

    private java.util.Map<java.lang.Integer, Event>
    listEvents(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("listEvents");
                __delBase = __getDelegate(false);
                _EventManagerDel __del = (_EventManagerDel)__delBase;
                return __del.listEvents(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __listEvents_name = "listEvents";

    public Ice.AsyncResult begin_listEvents()
    {
        return begin_listEvents(null, false, null);
    }

    public Ice.AsyncResult begin_listEvents(java.util.Map<String, String> __ctx)
    {
        return begin_listEvents(__ctx, true, null);
    }

    public Ice.AsyncResult begin_listEvents(Ice.Callback __cb)
    {
        return begin_listEvents(null, false, __cb);
    }

    public Ice.AsyncResult begin_listEvents(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_listEvents(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_listEvents(Callback_EventManager_listEvents __cb)
    {
        return begin_listEvents(null, false, __cb);
    }

    public Ice.AsyncResult begin_listEvents(java.util.Map<String, String> __ctx, Callback_EventManager_listEvents __cb)
    {
        return begin_listEvents(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_listEvents(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__listEvents_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __listEvents_name, __cb);
        try
        {
            __result.__prepare(__listEvents_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.Map<java.lang.Integer, Event> end_listEvents(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __listEvents_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        java.util.Map<java.lang.Integer, Event> __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = eventsHelper.read(__is);
        __is.readPendingObjects();
        __is.endReadEncaps();
        return __ret;
    }

    public String
    modify(int eventId, String eventName, String eventDesc, int daysFromNow, User u)
    {
        return modify(eventId, eventName, eventDesc, daysFromNow, u, null, false);
    }

    public String
    modify(int eventId, String eventName, String eventDesc, int daysFromNow, User u, java.util.Map<String, String> __ctx)
    {
        return modify(eventId, eventName, eventDesc, daysFromNow, u, __ctx, true);
    }

    private String
    modify(int eventId, String eventName, String eventDesc, int daysFromNow, User u, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("modify");
                __delBase = __getDelegate(false);
                _EventManagerDel __del = (_EventManagerDel)__delBase;
                return __del.modify(eventId, eventName, eventDesc, daysFromNow, u, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __modify_name = "modify";

    public Ice.AsyncResult begin_modify(int eventId, String eventName, String eventDesc, int daysFromNow, User u)
    {
        return begin_modify(eventId, eventName, eventDesc, daysFromNow, u, null, false, null);
    }

    public Ice.AsyncResult begin_modify(int eventId, String eventName, String eventDesc, int daysFromNow, User u, java.util.Map<String, String> __ctx)
    {
        return begin_modify(eventId, eventName, eventDesc, daysFromNow, u, __ctx, true, null);
    }

    public Ice.AsyncResult begin_modify(int eventId, String eventName, String eventDesc, int daysFromNow, User u, Ice.Callback __cb)
    {
        return begin_modify(eventId, eventName, eventDesc, daysFromNow, u, null, false, __cb);
    }

    public Ice.AsyncResult begin_modify(int eventId, String eventName, String eventDesc, int daysFromNow, User u, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_modify(eventId, eventName, eventDesc, daysFromNow, u, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_modify(int eventId, String eventName, String eventDesc, int daysFromNow, User u, Callback_EventManager_modify __cb)
    {
        return begin_modify(eventId, eventName, eventDesc, daysFromNow, u, null, false, __cb);
    }

    public Ice.AsyncResult begin_modify(int eventId, String eventName, String eventDesc, int daysFromNow, User u, java.util.Map<String, String> __ctx, Callback_EventManager_modify __cb)
    {
        return begin_modify(eventId, eventName, eventDesc, daysFromNow, u, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_modify(int eventId, String eventName, String eventDesc, int daysFromNow, User u, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__modify_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __modify_name, __cb);
        try
        {
            __result.__prepare(__modify_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(eventId);
            __os.writeString(eventName);
            __os.writeString(eventDesc);
            __os.writeInt(daysFromNow);
            u.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_modify(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __modify_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        String __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readString();
        __is.endReadEncaps();
        return __ret;
    }

    public String
    subscribe(int eventId, User u)
    {
        return subscribe(eventId, u, null, false);
    }

    public String
    subscribe(int eventId, User u, java.util.Map<String, String> __ctx)
    {
        return subscribe(eventId, u, __ctx, true);
    }

    private String
    subscribe(int eventId, User u, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("subscribe");
                __delBase = __getDelegate(false);
                _EventManagerDel __del = (_EventManagerDel)__delBase;
                return __del.subscribe(eventId, u, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __subscribe_name = "subscribe";

    public Ice.AsyncResult begin_subscribe(int eventId, User u)
    {
        return begin_subscribe(eventId, u, null, false, null);
    }

    public Ice.AsyncResult begin_subscribe(int eventId, User u, java.util.Map<String, String> __ctx)
    {
        return begin_subscribe(eventId, u, __ctx, true, null);
    }

    public Ice.AsyncResult begin_subscribe(int eventId, User u, Ice.Callback __cb)
    {
        return begin_subscribe(eventId, u, null, false, __cb);
    }

    public Ice.AsyncResult begin_subscribe(int eventId, User u, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_subscribe(eventId, u, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_subscribe(int eventId, User u, Callback_EventManager_subscribe __cb)
    {
        return begin_subscribe(eventId, u, null, false, __cb);
    }

    public Ice.AsyncResult begin_subscribe(int eventId, User u, java.util.Map<String, String> __ctx, Callback_EventManager_subscribe __cb)
    {
        return begin_subscribe(eventId, u, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_subscribe(int eventId, User u, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__subscribe_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __subscribe_name, __cb);
        try
        {
            __result.__prepare(__subscribe_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(eventId);
            u.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_subscribe(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __subscribe_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        String __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readString();
        __is.endReadEncaps();
        return __ret;
    }

    public static EventManagerPrx
    checkedCast(Ice.ObjectPrx __obj)
    {
        EventManagerPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (EventManagerPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    EventManagerPrxHelper __h = new EventManagerPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static EventManagerPrx
    checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        EventManagerPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (EventManagerPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    EventManagerPrxHelper __h = new EventManagerPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static EventManagerPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        EventManagerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    EventManagerPrxHelper __h = new EventManagerPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static EventManagerPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        EventManagerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    EventManagerPrxHelper __h = new EventManagerPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static EventManagerPrx
    uncheckedCast(Ice.ObjectPrx __obj)
    {
        EventManagerPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (EventManagerPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                EventManagerPrxHelper __h = new EventManagerPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static EventManagerPrx
    uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        EventManagerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            EventManagerPrxHelper __h = new EventManagerPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::generated::EventManager"
    };

    public static String
    ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM
    __createDelegateM()
    {
        return new _EventManagerDelM();
    }

    protected Ice._ObjectDelD
    __createDelegateD()
    {
        return new _EventManagerDelD();
    }

    public static void
    __write(IceInternal.BasicStream __os, EventManagerPrx v)
    {
        __os.writeProxy(v);
    }

    public static EventManagerPrx
    __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            EventManagerPrxHelper result = new EventManagerPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }
}
